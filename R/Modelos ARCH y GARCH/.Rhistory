knitr::opts_chunk$set(echo = TRUE)
r1=read.table("w-gs1yr.txt",header=T)[,4]
r3=read.table("w-gs3yr.txt",header=T)[,4]
head(r1)
head(r3)
str(r1)
tsr1=ts(r1,start=1962+5/365.25,frequency=365.25/7)
tsr3=ts(r3,start=1962+5/365.25,frequency=365.25/7)
ts.plot(tsr1,tsr3, gpars = list(col = c("black", "red")),ylab="porcentaje")
legend("topright", legend=c("tsr1", "tsr3"),
col=c("black", "red"), lty=1, cex=0.8)
str(tsr1)
tsc1=diff(tsr1)
tsc3=diff(tsr3)
ts.plot(tsc1,tsc3, gpars = list(col = c("black", "red")),ylab="porcentaje")
legend("topright", legend=c("tsc1", "tsc3"),
col=c("black", "red"), lty=1, cex=0.8)
par(mfrow=c(1,2))
plot(r1,r3,type='p',pch=16,sub = "(a) Variables Originales")
plot(tsc1,tsc3,type='p',pch=16,sub="(b) Variables en Cambios")
library(forecast)
forecast::Ccf(tsc1, tsc3, lag.max = 48)
library(astsa)
lag2.plot(tsc1, tsc3, max.lag = 4)
knitr::opts_chunk$set(echo = TRUE)
require(SLBDD)
require(xts)
data(CPIEurope200015)
CPIEurope200015
monthly_index <- seq.Date(from = as.Date("2000-01-01"), # Starting date
to = as.Date("2015-10-01"), # Ending date
by = "month") # Defining the time intervals
IPC33=xts(CPIEurope200015, order.by=monthly_index)
plot(IPC33)
length(monthly_index)
log_IPC33=log(IPC33)
plot(log_IPC33)
as.matrix(log_IPC33)
PCA_log_IPC33=princomp(as.matrix(log_IPC33))
names(PCA_log_IPC33)
plot(1:33,PCA_log_IPC33$sdev^2,xlab="Componente",ylab="Varianza",pch="op",main="log IPC 33")  ###Varianza por componente
plot(1:33,cumsum(PCA_log_IPC33$sdev^2)/cumsum(PCA_log_IPC33$sdev^2)[33],xlab="Componente",ylab="Varianza Acumulada",pch="op",main="log IPC 33")###Proporción acumulada por componente
PCA_log_IPC33$scores   ###Componentes principales
#x11()
par(mfrow = c(3 , 2))
plot(PCA_log_IPC33$scores[,1],type="l",ylab="PC1") ###Tendencia creciente
plot(PCA_log_IPC33$scores[,2],type="l",ylab="PC2")##Tendencia, pero no necesariamente monótona
plot(PCA_log_IPC33$scores[,3],type="l",ylab="PC3")##Tendencia, pero no necesariamente monótona
plot(PCA_log_IPC33$scores[,4],type="l",ylab="PC4")##Patrones periódicos
plot(PCA_log_IPC33$scores[,5],type="l",ylab="PC5")
plot(PCA_log_IPC33$scores[,6],type="l",ylab="PC6")##Patrones periódicos
x_t=diff(log_IPC33)[2:190,]   ###tasa de inflación con respecto al mes anterior
plot(x_t)
PCA_tasa_IPC33=princomp(as.matrix(x_t))
plot(1:33,PCA_tasa_IPC33$sdev^2,xlab="Componente",ylab="Varianza",pch="op",main="Tasa IPC 33")
PCA_tasa_IPC33$sdev
plot(1:33,cumsum(PCA_tasa_IPC33$sdev^2)/cumsum(PCA_tasa_IPC33$sdev^2)[33],xlab="Componente",ylab="Proporción Acumulada",pch="op",main="Tasa IPC 33")
par(mfrow = c(3 , 2))
plot(PCA_tasa_IPC33$scores[,1],type="l",ylab="PC1") ###No Tendencia,pero si patrones estacionales.
plot(PCA_tasa_IPC33$scores[,2],type="l",ylab="PC2")
plot(PCA_tasa_IPC33$scores[,3],type="l",ylab="PC3")
plot(PCA_tasa_IPC33$scores[,4],type="l",ylab="PC4")
plot(PCA_tasa_IPC33$scores[,5],type="l",ylab="PC5")
plot(PCA_tasa_IPC33$scores[,6],type="l",ylab="PC6")
fviz_pca_var(PCA_tasa_IPC33,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
install.packages("factoextra")
require(factoextra)
x_t=diff(log_IPC33)[2:190,]   ###tasa de inflación con respecto al mes anterior
plot(x_t)
PCA_tasa_IPC33=princomp(as.matrix(x_t))
plot(1:33,PCA_tasa_IPC33$sdev^2,xlab="Componente",ylab="Varianza",pch="op",main="Tasa IPC 33")
PCA_tasa_IPC33$sdev
plot(1:33,cumsum(PCA_tasa_IPC33$sdev^2)/cumsum(PCA_tasa_IPC33$sdev^2)[33],xlab="Componente",ylab="Proporción Acumulada",pch="op",main="Tasa IPC 33")
par(mfrow = c(3 , 2))
plot(PCA_tasa_IPC33$scores[,1],type="l",ylab="PC1") ###No Tendencia,pero si patrones estacionales.
plot(PCA_tasa_IPC33$scores[,2],type="l",ylab="PC2")
plot(PCA_tasa_IPC33$scores[,3],type="l",ylab="PC3")
plot(PCA_tasa_IPC33$scores[,4],type="l",ylab="PC4")
plot(PCA_tasa_IPC33$scores[,5],type="l",ylab="PC5")
plot(PCA_tasa_IPC33$scores[,6],type="l",ylab="PC6")
fviz_pca_var(PCA_tasa_IPC33,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
require(odpc)
UMEdata = read.csv("UME20002018.csv", header=TRUE)
x=as.matrix(UMEdata)
n=nrow(x)
G=matrix(0,n,19)
for (i in 1:19){G[,i]=x[,1+3*(i-1)]}
G0=log(G)
sG0=scale(G0)
G1=diff(sG0)
y1 <- range(G1)
tdx <- c(2:76)/4+2000
plot(tdx,G1[,1],xlab="año",ylab="Tasa de Crecimiento PIB", main="Países Euro",type="l", ylim=y1)
for (i in 2:19){lines(tdx,G1[,i],col=i)}
# Minimization of an Information Criterion
salida_IC=crit.odpc(G1,k_list = 1:5,
max_num_comp = 5)
salida_IC
### Cross-Validation
salida_cv=cv.odpc(G1,h=1,k_list = 1:5,
max_num_comp = 5)
salida_cv
####en ks la primera componente es el número de retardos usados para definir la componente principal dinámica
###La segunda componente es el número de retardos de la  componente principal usada para reconstruir la serie. Puede ser una matriz,
###Cada fila indicará los retardos usados para cada componente principal
sal<- odpc(G1, ks=matrix(c(2,4,2,4),2,2))   ### Por defecto calcula dos componentes principales
sal
f1<- sal[[1]]$f####DPC 1
a1<- sal[[1]]$a  ###Vector "a" para obtener la PC1
f2<- sal[[2]]$f ####DPC 2
a2<- sal[[2]]$a ###Vector "a" para obtener la PC2
B1 <- sal[[1]]$B ###Vector de B para obtener la reconstrucción
B2 <- sal[[2]]$B ###Vector de B para obtener la reconstrucción
y1 <- range(f1)+c(-1.5,0)
y2<- range(f2)+c(-0.5,0.5)
tdx1 <- c(4:76)/4+2000
tdx2 <- c(6:76)/4+2000
plot(tdx1,-f1,xlab="year",ylab="PC1", main="Primer PC
Países Euro", type="l", ylim=y1)
plot(tdx2,-f2,xlab="year",ylab="PC2", main="Secundo PC
Países Euro", type="l", ylim=y2)
# A vector is split into its lags in order to plot them.
a10=a1[1:19]
a11=a1[20:38]
a12=a1[39:57]
#a13=a1[58:76]
par(mfrow=c(1,3))
plot(a10,xlab="País",ylab="Peso Lag 0", type="l")
plot(a11,xlab="Country",ylab="Peso Lag 1", type="l")
plot(a12,xlab="Country",ylab="Peso Lag 2 ", type="l")
#plot(a13,xlab="Country",ylab="Lag 3 weight ", type="l")
B1 <- sal[[1]]$B
par(mfrow=c(1,3))
# The Loadings B are plotted
plot(B1[1,],xlab="País",ylab="Loadings 1st DF lag 0", type="l")
plot(B1[2,],xlab="Countries",ylab="Loadings 1st DF lag 1", type="l")
plot(B1[3,],xlab="Countries",ylab="Loadings 1st DF lag 2", type="l")
#plot(B1[4,],xlab="Countries",ylab="Loadings 1st DF lag 3", type="l")
# A vector is split into its lags in order to plot them.
a10=a1[1:19]
a11=a1[20:38]
a12=a1[39:57]
#a13=a1[58:76]
par(mfrow=c(1,3))
plot(a10,xlab="País",ylab="Peso Lag 0", type="l")
plot(a11,xlab="Country",ylab="Peso Lag 1", type="l")
plot(a12,xlab="Country",ylab="Peso Lag 2 ", type="l")
#plot(a13,xlab="Country",ylab="Lag 3 weight ", type="l")
B1 <- sal[[1]]$B
par(mfrow=c(1,3))
# The Loadings B are plotted
plot(B1[1,],xlab="País",ylab="Cargas Primer DF retardo 0", type="l")
plot(B1[2,],xlab="Países",ylab="Cargas Segunda DF retardo 0", type="l")
plot(B1[3,],xlab="Países",ylab="Cargas Tercer DF retardo 0", type="l")
#plot(B1[4,],xlab="Países",ylab="Loadings 1st DF lag 3", type="l")
Pronosticos <- forecast.odpcs(sal, h = 1)
#mse <- mean((x[T, ] - forecasts)**2)
#mse
Pronosticos
Pronosticos <- forecast.odpcs(sal, h = 2)
Pronosticos
#mse <- mean((x[T, ] - forecasts)**2)
#mse
#install.packages("fGarch")
#install.packages("aTSA")
library(fGarch)
library(aTSA)
library(forecast)
#####Ajuste Serie datos reales####
##Importación
###Establecer el directorio
sp5=as.ts(scan(file="SP500.txt"))
setwd("~/Documents/GitHub/TimeSeries/Series Univariadas/R/Modelos ARCH y GARCH")
#####Ajuste Serie datos reales####
##Importación
###Establecer el directorio
sp5=as.ts(scan(file="SP500.txt"))
plot(sp5)
acf(sp5,ci.type='ma')
pacf(sp5)
acf(sp5^2)
pacf(sp5^2)
coeftest(auto.arima(sp5)) ####Se podría ajustar un ARMA(2,2) con constante
require(lm)
library(lmtest)
coeftest(auto.arima(sp5)) ####Se podría ajustar un ARMA(2,2) con constante
modeloarima=stats::arima(sp5,order = c(2,0,2),include.mean = TRUE)
coeftest(modeloarima)
aTSA::arch.test(modeloarima)
x11(9)
aTSA::arch.test(modeloarima)
acf(modeloarima$residual)
pacf(modeloarima$residual)
acf(modeloarima$residual^2)
pacf(modeloarima$residual^2)
?garchFit
modelosp5_1=garchFit(~arma(2,2)+garch(9,0),data=sp5,trace=F,include.mean=T)
summary(modelosp5_1)
plot(modelosp5_1)
x11()
plot(modelosp5_1)
prediccion=predict(modelosp5_1,n.ahead=10,plot=TRUE)
library(rugarch)
###Especificaci?n del modelo
spec1=rugarch::ugarchspec(variance.model=list(model="sGARCH",garchOrder = c(1,1)),
mean.model=list(armaOrder=c(2,2),include.mean = TRUE),distribution.model = "norm")
fit1=ugarchfit(data=sp5,spec=spec1)
show(fit1)
plot(fit1)
forc1 = ugarchforecast(fit1, n.ahead = 10)  ###Predicción de la varianza condicional
plot(forc1)
